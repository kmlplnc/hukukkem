version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hukukkem_postgres
    environment:
      POSTGRES_DB: hukuk
      POSTGRES_USER: hukuk_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-hukuk_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5434:5432"
    networks:
      - hukukkem_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: hukukkem_backend
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: hukuk
      DB_USER: hukuk_user
      DB_PASSWORD: ${DB_PASSWORD:-hukuk_pass}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://hukukkemai.com,https://www.hukukkemai.com}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    depends_on:
      - postgres
    networks:
      - hukukkem_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Nginx)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: hukukkem_frontend
    depends_on:
      - backend
    networks:
      - hukukkem_network
    restart: unless-stopped

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: hukukkem_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - hukukkem_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  hukukkem_network:
    driver: bridge 